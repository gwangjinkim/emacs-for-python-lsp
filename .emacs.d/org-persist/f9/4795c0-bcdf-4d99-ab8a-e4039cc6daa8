(((elisp org-element--headline-cache) . #s(avl-tree- [[nil [nil nil #5=(headline (:raw-value #1="Python settings" :begin 8766 :end 9455 :pre-blank 1 :contents-begin 8785 :contents-end 9454 :robust-begin 8787 :robust-end 9452 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8766 :title #1# :mode nil :granularity element :cached t :parent #3=(org-data (:begin 1 :contents-begin 1 :contents-end 9454 :end 9455 :robust-begin 3 :robust-end 9452 :post-blank 1 :post-affiliated 1 :path "/Users/josephus/emacs/emacs-for-python-lsp/.emacs.d/myinit.org" :mode org-data :CATEGORY "myinit" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #4=(headline (:raw-value #2="Settings" :begin 58 :end 8766 :pre-blank 1 :contents-begin 72 :contents-end 8765 :robust-begin 74 :robust-end 8763 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 58 :title #2# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 1] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[nil nil #3# 0] [nil nil #4# 0] (section (:begin 1 :end 58 :contents-begin 1 :contents-end 57 :robust-begin 1 :robust-end 55 :post-blank 1 :post-affiliated 1 :mode first-section :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 72 :end 8750 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12  ;; hide startup message\12  (setq inhibit-startup-message t)\12\12  ;; disable tool bar\12  (tool-bar-mode -1)\12\12  ;; enable line numbers globally\12  (when (fboundp 'global-display-line-numbers-mode)\12    (global-display-line-numbers-mode 1))\12\12  ;; nicer theme\12  (use-package sweet-theme\12    :ensure t\12    :init\12    (load-theme 'sweet t))\12\12\12\12  (defun joindirs (root &rest dirs)\12    \"Joins a series of directories together,\12                 like Python's os.path.join\12                 (joindirs \\\"/a\\\" \\\"b\\\" \\\"c\\\") => /a/b/c\"\12    (if (not dirs)\12        root\12      (apply 'joindirs\12             (expand-file-name (car dirs) root)\12             (cdr dirs))))\12\12  ;; add .bin/local to PATH variable the current\12  ;; this is because I start emacs with\12  ;; env HOME=$HOME/somefolder\12\12  (setenv \"PATH\" (concat (getenv \"PATH\") \":\"\12                         (joindirs (getenv \"ORIG_HOME\") \".bin\" \"local\")))\12\12  ;; get conda environment\12  (require 'json)\12\12  (defun get-conda-envs-dir ()\12    \"Get the primary directory where Conda environments are stored.\"\12    (let* ((output (process-lines \"conda\" \"info\" \"--json\"))\12           (json-object-type 'hash-table)\12           (json-array-type 'list)\12           (json-key-type 'string)\12           (info (json-read-from-string (mapconcat 'identity output \"\\n\")))\12           (envs-dirs (gethash \"envs_dirs\" info)))\12      (if envs-dirs\12          (car envs-dirs)\12        (error \"Could not determine Conda environments directory\"))))\12\12  ;; set conda env as workon\12  (defun set-conda-envs-dir-as-workon ()\12    \"Set the Conda environments directory as the WORKON environment variable.\"\12    (let ((conda-envs-dir (get-conda-envs-dir)))\12      (setenv \"WORKON_HOME\" conda-envs-dir)\12      (message \"WORKON_HOME set to %s\" conda-envs-dir)))\12\12  ;; Ensure use-package is installed\12  (unless (package-installed-p 'use-package)\12    (package-refresh-contents)\12    (package-install 'use-package))\12\12  ;; Install and configure Projectile\12  (use-package projectile\12    :ensure t\12    :init\12    (projectile-mode +1)\12    :bind-keymap\12    (\"C-c p\" . projectile-command-map)\12    :config\12    (setq projectile-indexing-method 'native)\12    (setq projectile-sort-order 'recentf)\12    (setq projectile-enable-caching t))\12\12  ;; Optional: Install and configure Helm for better interface\12  (use-package helm\12    :ensure t\12    :init\12    (helm-mode 1))\12  (use-package helm-projectile\12    :ensure t\12    :init\12    (helm-projectile-on))\12\12  ;; Install and configure Ivy, Counsel, and Swiper\12  (use-package ivy\12    :ensure t\12    :diminish\12    :bind ((\"C-s\" . swiper)\12           :map ivy-minibuffer-map\12           (\"TAB\" . ivy-alt-done)\12           (\"C-l\" . ivy-alt-done)\12           (\"C-j\" . ivy-next-line)\12           (\"C-k\" . ivy-previous-line)\12           :map ivy-switch-buffer-map\12           (\"C-k\" . ivy-previous-line)\12           (\"C-l\" . ivy-done)\12           :map ivy-reverse-i-search-map\12           (\"C-k\" . ivy-previous-line)\12           (\"C-d\" . ivy-reverse-i-search-kill))\12    :config\12    (ivy-mode 1))\12\12  (use-package counsel\12    :ensure t\12    :after ivy\12    :config (counsel-mode))\12\12  (use-package swiper\12    :ensure t\12    :after ivy\12    :bind ((\"C-s\" . swiper)))\12\12  ;; Install and configure LSP Mode\12  (use-package lsp-mode\12    :ensure t\12    :hook ((python-mode . lsp)\12           (js-mode . lsp)\12           (go-mode . lsp))\12    :commands lsp\12    :config\12    ;; Define the custom function\12    (defun my/lsp-python-send-line ()\12      \"Send the current line to the inferior Python process.\"\12      (interactive)\12      (let ((current-line (thing-at-point 'line t)))\12        (python-shell-send-string current-line)))\12\12    ;; Bind the custom function to a key combination\12    (global-set-key (kbd \"C-l\") 'my/lsp-python-send-line)\12\12    ;; Use flycheck instead of flymake\12    (setq lsp-prefer-flymake nil))\12\12  (use-package lsp-ui\12    :ensure t\12    :commands lsp-ui-mode\12    :config\12    (setq lsp-ui-sideline-enable nil\12          lsp-ui-doc-enable t))\12\12  ;; Install and configure Company for completions\12  (use-package company\12    :ensure t\12    :config\12    (setq company-minimum-prefix-length 1\12          company-idle-delay 0.0)\12    (global-company-mode t))\12\12  ;; Install and configure Flycheck for syntax checking\12  (use-package flycheck\12    :ensure t\12    :init (global-flycheck-mode))\12\12  ;; Install and configure Magit for Git integration\12  (use-package magit\12    :ensure t\12    :commands magit-status)\12\12  ;; Install and configure Python-specific LSP server (pyright)\12  (use-package lsp-pyright\12    :ensure t\12    :after lsp-mode\12    :hook (python-mode . (lambda ()\12                           (require 'lsp-pyright)\12                           (lsp))))\12\12  ;; Install and configure pyvenv for virtual environment management\12  (use-package pyvenv\12    :ensure t\12    :config\12    (pyvenv-mode 1)\12    (setenv \"WORKON_HOME\" (get-conda-envs-dir)))\12\12  ;; debugging\12  (let ((debugging-method :dape))\12    (cond ((eq debugging-method :dap-mode)\12           (use-package dap-mode\12             :ensure t\12             :after lsp-mode\12             :config\12             (dap-auto-configure-mode)\12             (require 'dap-python)\12             (setq dap-python-debugger 'debugpy)\12\12             ;; Keybindings for debugging\12             (global-set-key (kbd \"C-c d b b\") 'dap-breakpoint-toggle) ;; breakpoint\12             (global-set-key (kbd \"C-c d s\") 'dap-debug)\12             (global-set-key (kbd \"C-c d c\") 'dap-continue)\12             (global-set-key (kbd \"C-c d o\") 'dap-next)\12             (global-set-key (kbd \"C-c d i\") 'dap-step-in)\12             (global-set-key (kbd \"C-c d u\") 'dap-step-out)\12             (global-set-key (kbd \"C-c d q\") 'dap-disconnect)\12             (global-set-key (kbd \"C-c d r\") 'dap-restart-frame)\12\12             ;; Set a conditional breakpoint\12             (global-set-key (kbd \"C-c d b c\") 'dap-breakpoint-condition) ;; condition\12\12             ;; Add an exception breakpoint\12             (global-set-key (kbd \"C-c d b e\") 'dap-breakpoint-add) ;; exception\12\12             (global-set-key (kbd \"C-c d g\") 'my/python-debug-config)\12\12             ;; Optional: enable logging for dap-mode\12             (setq dap-print-io t))\12\12           ;; pip install debugpy\12\12           ;; (use-package dap-ui\12           ;;   :ensure t\12           ;;   :config\12           ;;   (dap-ui-mode 1)\12           ;;   (dap-ui-controls-mode 1))\12\12\12           (setq dap-python-executable \"python3\")\12\12           (defun my/python-debug-config ()\12             \"Set up the debug configuration for Python.\"\12             (interactive)\12             (dap-debug\12              (list :type \"python\"\12                    :args \"\"\12                    :cwd (projectile-project-root)  ;; Ensure you are in the correct project root\12                    :program (buffer-file-name)\12                    :request \"launch\"\12                    :name \"Python :: Run Configuration\"\12                    :env '((\"PYTHONPATH\" . (projectile-project-root)))))))\12          ((eq debugging-method :dape)\12           (use-package dape\12             :preface\12             ;; By default dape shares the same keybinding prefix as `gud'\12             ;; If you do not want to use any prefix, set it to nil.\12             ;; (setq dape-key-prefix \"\\C-x\\C-a\")\12\12             :hook\12             ;; Save breakpoints on quit\12             ((kill-emacs . dape-breakpoint-save)\12              ;; Load breakpoints on startup\12              (after-init . dape-breakpoint-load))\12\12             :init\12             ;; To use window configuration like gud (gdb-mi)\12             ;; (setq dape-buffer-window-arrangement 'gud)\12\12             :config\12             ;; Info buffers to the right\12             ;; (setq dape-buffer-window-arrangement 'right)\12\12             ;; Global bindings for setting breakpoints with mouse\12             ;; (dape-breakpoint-global-mode)\12\12             ;; Pulse source line (performance hit)\12             ;; (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)\12\12             ;; To not display info and/or buffers on startup\12             ;; (remove-hook 'dape-start-hook 'dape-info)\12             ;; (remove-hook 'dape-start-hook 'dape-repl)\12\12             ;; To display info and/or repl buffers on stopped\12             ;; (add-hook 'dape-stopped-hook 'dape-info)\12             ;; (add-hook 'dape-stopped-hook 'dape-repl)\12\12             ;; Kill compile buffer on build success\12             ;; (add-hook 'dape-compile-hook 'kill-buffer)\12\12             ;; Save buffers on startup, useful for interpreted languages\12             ;; (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))\12\12             ;; Projectile users\12             ;; (setq dape-cwd-fn 'projectile-project-root)\12             ))))\12\12\12  ;; \12" :post-blank 1 :post-affiliated 72 :mode planning :granularity element :cached t :parent #7=(section (:begin 72 :end 8766 :contents-begin 72 :contents-end 8765 :robust-begin 72 :robust-end 8763 :post-blank 1 :post-affiliated 72 :mode section :granularity element :cached t :parent #4# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 8785 :end 9089 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    ;; Python-specific configuration\12\12    ;; Set Conda environments directory\12    (set-conda-envs-dir-as-workon)\12\12    ;; Configure Python shell to use IPython\12    (setq python-shell-interpreter \"ipython\"\12          python-shell-interpreter-args \"-i --simple-prompt\")\12" :post-blank 1 :post-affiliated 8785 :mode planning :granularity element :cached t :parent #6=(section (:begin 8785 :end 9455 :contents-begin 8785 :contents-end 9454 :robust-begin 8785 :robust-end 9452 :post-blank 1 :post-affiliated 8785 :mode section :granularity element :cached t :parent #5# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #6# 1] #5# 1] #7# 1] nil nil 0] org-element--cache-compare)))