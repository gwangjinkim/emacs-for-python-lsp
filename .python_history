exec("def __PYTHON_EL_eval(source, filename):\n    import ast, sys\n    if sys.version_info[0] == 2:\n        from __builtin__ import compile, eval, globals\n    else:\n        from builtins import compile, eval, globals\n    try:\n        p, e = ast.parse(source, filename), None\n    except SyntaxError:\n        t, v, tb = sys.exc_info()\n        sys.excepthook(t, v, tb.tb_next)\n        return\n    if p.body and isinstance(p.body[-1], ast.Expr):\n        e = p.body.pop()\n    try:\n        g = globals()\n        exec(compile(p, filename, 'exec'), g, g)\n        if e:\n            return eval(compile(ast.Expression(e.value), filename, 'eval'), g, g)\n    except Exception:\n        t, v, tb = sys.exc_info()\n        sys.excepthook(t, v, tb.tb_next)")
exec("def __PYTHON_EL_eval_file(filename, tempname, delete):\n    import codecs, os, re\n    pattern = r'^[ \t\f]*#.*?coding[:=][ \t]*([-_.a-zA-Z0-9]+)'\n    with codecs.open(tempname or filename, encoding='latin-1') as file:\n        match = re.match(pattern, file.readline())\n        match = match or re.match(pattern, file.readline())\n        encoding = match.group(1) if match else 'utf-8'\n    with codecs.open(tempname or filename, encoding=encoding) as file:\n        source = file.read().encode(encoding)\n    if delete and tempname:\n        os.remove(tempname)\n    return __PYTHON_EL_eval(source, filename)")
__PYTHON_EL_eval_file("/var/folders/wf/f1yws4hx18dd2z9mvgy6x7p40000gn/T/pym10VO1", "/var/folders/wf/f1yws4hx18dd2z9mvgy6x7p40000gn/T/pym10VO1", True)
exit()
